const prompt = require('prompt-sync')({ sigint: true });
const clear = require('clear-screen');
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£  emoji ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤ 
const hat = 'üé©';  
const hole = 'üü°'; 
const fieldCharacter = 'üü¶'; 
const pathCharacter = 'üò∫'; 

// ‡∏™‡∏£‡πâ‡∏≤‡∏á class field ‡∏Å‡∏≥‡∏´‡∏ô‡∏îObj  ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏ámap
class Field {
  constructor(rows, columns) {
    this.rows = rows;
    this.columns = columns; 
    this.field = this.generateField();
    this.positionX = 0;
    this.positionY = 0; //
    this.field[0][0] = pathCharacter; //‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }
  //----------------------------------------------------------------
  // ‡πÉ‡∏ä‡πâ Array ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡πÅ‡∏ö‡∏ö2‡∏°‡∏¥‡∏ï‡∏¥ 
  generateField() {
    const field = new Array(this.rows).fill(null).map(() => new Array(this.columns).fill(fieldCharacter));

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏°‡∏ß‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Map ‡πÅ‡∏ö‡∏öRandom ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞Random  ‡∏´‡∏°‡∏ß‡∏Å‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á 
    const hatX = Math.floor(Math.random() * this.columns);
    const hatY = Math.floor(Math.random() * this.rows);
    field[hatY][hatX] = hat;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏•‡∏∏‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Map ‡πÅ‡∏ö‡∏ö Random  ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ do...while
    const numHoles = Math.floor((this.rows * this.columns) / 4);
    for (let i = 0; i < numHoles; i++) {
      let holeX, holeY;
      do {
        holeX = Math.floor(Math.random() * this.columns);
        holeY = Math.floor(Math.random() * this.rows);
      } while (
        field[holeY][holeX] !== fieldCharacter ||
        (holeX === 0 && holeY === 0) ||
        (holeX === hatX && holeY === hatY)
      );
      field[holeY][holeX] = hole;
    }

    return field;
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏ámap
  print() {
    for (let row of this.field) {
      console.log(row.join(' '));
    }
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡πÉ‡∏ômap
  move(direction) {
    let newX = this.positionX;
    let newY = this.positionY;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÇ‡∏î
    switch (direction) {
      case 'u':
        newY -= 1;
        break;
      case 'd':
        newY += 1;
        break;
      case 'l':
        newX -= 1;
        break;
      case 'r':
        newX += 1;
        break;
    }
    //‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
    if (
      newX < 0 ||
      newY < 0 ||
      newX >= this.columns ||
      newY >= this.rows ||
      this.field[newY][newX] === hole
    ) {
      console.log('Game over!');
      process.exit(0);
    } else if (this.field[newY][newX] === hat) {
      console.log('You win!');
      process.exit(0);
    } else if (this.field[newY][newX] !== fieldCharacter) {
      console.log('Game over!');
      process.exit(0);
    }
    clear();direction 
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï pathCharacter ‡πÉ‡∏´‡∏°‡πà
    this.field[this.positionY][this.positionX] = fieldCharacter;
    this.positionX = newX;
    this.positionY = newY;
    this.field[this.positionY][this.positionX] = pathCharacter;

    // ‡πÄ‡∏ä‡πá‡∏Ñmap‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    this.print();
    }
}
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î field ‡πÉ‡∏´‡∏°‡πà
const field = new Field(10, 10);
field.print(); 

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 while (true) {
   const moveDirection = prompt('Hi! Welcome to the Game. Which way?  ');
   field.move(moveDirection);
   
 }